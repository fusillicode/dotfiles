#!/bin/bash

set -euo pipefail

get_latest_release() {
  curl -sSL https://api.github.com/repos/"$1"/releases/latest | grep "tag_name" | cut -d '"' -f 4 | cat
}

dev_tools_dir="$HOME"/.dev-tools
bin_dir="$HOME"/.local/bin

mkdir -p "$dev_tools_dir" "$bin_dir"
#
# curl -sSL https://github.com/rust-lang/rust-analyzer/releases/download/nightly/rust-analyzer-aarch64-apple-darwin.gz | \
#   gunzip -c - > "$bin_dir"/rust-analyzer
#
# curl -sSL https://github.com/tamasfe/taplo/releases/latest/download/taplo-darwin-aarch64.gz | \
#   gunzip -c - > "$bin_dir"/taplo
#
# latest_release=$(get_latest_release "hashicorp/terraform-ls" | cut -c2-)
# curl -sSL https://releases.hashicorp.com/terraform-ls/"$latest_release"/terraform-ls_"$latest_release"_darwin_arm64.zip | \
#   tar -xz -c "$bin_dir"
#
# repo="tekumara/typos-vscode"
# latest_release=$(get_latest_release $repo)
# curl -sSL https://github.com/"$repo"/releases/download/"$latest_release"/typos-lsp-"$latest_release"-aarch64-apple-darwin.tar.gz | \
#   tar -xz -C "$dev_tools_dir"
#
# curl -sSL https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Darwin-x86_64 --output "$bin_dir"/hadolint
# curl -sSL https://github.com/mrjosh/helm-ls/releases/latest/download/helm_ls_darwin_amd64 --output "$bin_dir"/helm_ls
# curl -sSL https://github.com/artempyanykh/marksman/releases/latest/download/marksman-macos --output "$bin_dir"/marksmam

tool="elixir-ls"
repo="elixir-lsp/$tool"
dev_tool_repo_dir="$dev_tools_dir"/"$tool"
latest_release=$(get_latest_release $repo)
mkdir -p "$dev_tool_repo_dir" && \
  curl -sSL https://github.com/"$repo"/releases/download/"$latest_release"/"$tool"-"$latest_release".zip | \
  tar -xz -C "$dev_tool_repo_dir"

tool="shellcheck"
repo="koalaman/$tool"
latest_release=$(get_latest_release $repo)
curl -sSL https://github.com/"$repo"/releases/download/"$latest_release"/"$tool"-"$latest_release".darwin.x86_64.tar.xz | \
  tar -xz -C "$dev_tools_dir"

# repo="lexical"
# dev_tool_repo_dir="$dev_tools_dir"/"$repo"
# mkdir -p "$dev_tool_repo_dir" && \
#   git clone git@github.com:lexical-lsp/"$repo".git "$_" \
#   cd "$dev_tool_repo_dir" && \
#   mix deps.get && \
#   mix package && \
#
# mkdir -p "$dev_tools_dir"/phpactor && \
#   composer require --working-dir "$_" phpactor/phpactor &&
#   ln -s "$dev_tools_dir"/phpactor/vendor/bin/phpactor "$bin_dir"
#
# mkdir -p "$dev_tools_dir"/php-cs-fixer && \
#   composer require --working-dir "$_" friendsofphp/php-cs-fixer &&
#   ln -s "$dev_tools_dir"/php-cs-fixer/vendor/bin/php-cs-fixer "$bin_dir"
#
# mkdir -p "$dev_tools_dir"/psalm && \
#   composer require --working-dir "$_" vimeo/psalm &&
#   ln -s "$dev_tools_dir"/psalm/vendor/bin/* "$bin_dir"
#
# mkdir -p "$dev_tools_dir"/commitlint && \
#   npm install --prefix "$_" @commitlint/{cli,config-conventional} && \
#   ln -s "$dev_tools_dir"/commitlint/node_modules/.bin/commitlint "$bin_dir"
#
# mkdir -p "$dev_tools_dir"/elm-language-server && \
#   npm install --prefix "$_" @elm-tooling/elm-language-server && \
#   ln -s "$dev_tools_dir"/elm-language-server/node_modules/.bin/elm-language-server "$bin_dir"
#
# mkdir -p "$dev_tools_dir"/compose-language-service && \
#   npm install --prefix "$_" @microsoft/compose-language-service && \
#   ln -s "$dev_tools_dir"/compose-language-service/node_modules/.bin/docker-compose-langserver "$bin_dir"
#
# mkdir -p "$dev_tools_dir"/bash-language-server && \
#   npm install --prefix "$_" bash-language-server && \
#   ln -s "$dev_tools_dir"/bash-language-server/node_modules/.bin/bash-language-server "$bin_dir"
#
# mkdir -p "$dev_tools_dir"/dockerfile-language-server-nodejs && \
#   npm install --prefix "$_" dockerfile-language-server-nodejs && \
#   ln -s "$dev_tools_dir"/dockerfile-language-server-nodejs/node_modules/.bin/docker-langserver "$bin_dir"
#
# mkdir -p "$dev_tools_dir"/graphql-language-service-cli && \
#   npm install --prefix "$_" graphql-language-service-cli && \
#   ln -s "$dev_tools_dir"/graphql-language-service-cli/node_modules/.bin/graphql-lsp "$bin_dir"
#
# mkdir -p "$dev_tools_dir"/prettier && \
#   npm install --prefix "$_" prettier && \
#   ln -s "$dev_tools_dir"/prettier/node_modules/.bin/prettier "$bin_dir"
#
# mkdir -p "$dev_tools_dir"/sql-language-server && \
#   npm install --prefix "$_" sql-language-server && \
#   ln -s "$dev_tools_dir"/sql-language-server/node_modules/.bin/sql-language-server "$bin_dir"
#
# mkdir -p "$dev_tools_dir"/vscode-html-languageservice && \
#   npm install --prefix "$_" vscode-html-languageservice && \
#   ln -s "$dev_tools_dir"/vscode-html-languageservice/node_modules/.bin/vscode-html-language-server "$bin_dir"
#
# mkdir -p "$dev_tools_dir"/vscode-json-languageservice && \
#   npm install --prefix "$_" vscode-json-languageservice && \
#   ln -s "$dev_tools_dir"/vscode-json-languageservice/node_modules/.bin/vscode-json-language-server "$bin_dir"
#
# mkdir -p "$dev_tools_dir"/yaml-language-server && \
#   npm install --prefix "$_" yaml-language-server && \
#   ln -s "$dev_tools_dir"/yaml-language-server/node_modules/.bin/yaml-language-server "$bin_dir"
#
# mkdir -p "$dev_tools_dir"/ruff-lsp && \
#   pip install ruff-lsp --target=./"$_" && \
#   ln -s "$dev_tools_dir"/ruff-lsp/bin/ruff "$bin_dir"
#
# rtx use -g lua-language-server@latest
