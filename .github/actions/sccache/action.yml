name: "sccache"
description: "Install & cache sccache compiler cache"
inputs:
  cache-key-suffix:
    description: "Optional suffix to differentiate caches (e.g. coverage, docs)."
    required: false
    default: "default"
  cache-size:
    description: "Desired maximum sccache size (e.g. 2G). If empty, unchanged."
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - name: Cache sccache directory
      uses: actions/cache@v4
      with:
        path: ${{ env.SCCACHE_DIR || '/home/runner/.cache/sccache' }}
        key: sccache-${{ runner.os }}-${{ hashFiles('yog/rust-toolchain.toml') }}-${{ hashFiles('**/Cargo.lock') }}-${{ inputs.cache-key-suffix }}
        restore-keys: |
          sccache-${{ runner.os }}-
    - name: Install sccache (if missing)
      shell: bash
      run: |
        set -euo pipefail
        if ! command -v sccache >/dev/null 2>&1; then
          echo "Installing sccache..."
          # Temporarily disable RUSTC_WRAPPER during installation so cargo can invoke rustc directly.
          # This avoids failures when the workflow sets RUSTC_WRAPPER=sccache before sccache exists.
          (unset RUSTC_WRAPPER; cargo install sccache --locked)
        fi
        sccache --version
        if [[ -n "${{ inputs.cache-size }}" ]]; then
          sccache --configure cache_size=${{ inputs.cache-size }} || true
        fi
        echo "Initial stats:" || true
        sccache --show-stats || true
