name: "Setup"
description: "Set up Rust toolchain & optionally install specified global cargo tools (caching handled externally via Swatinem/rust-cache)."
inputs:
  tools:
    description: "Space-separated list of cargo crate specs (name or name@version)"
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - name: Set up Rust (pinned nightly via rust-toolchain.toml)
      shell: bash
      working-directory: yog
      run: |
        set -euo pipefail
        rustup show
        rustc -V

    # NOTE: Dependency & build artifact caching is delegated to Swatinem/rust-cache
    # which must be invoked in each workflow AFTER checkout and BEFORE builds/tests.

    - name: Derive tools hash
      if: inputs.tools != ''
      id: tools_hash
      shell: bash
      run: |
        set -euo pipefail
        norm=$(echo "${{ inputs.tools }}" | tr ' ' '\n' | sed '/^$/d' | sort | tr '\n' ' ' | sed 's/ $//')
        echo "Normalized tools: $norm"
        if command -v sha256sum >/dev/null 2>&1; then
          hash=$(printf '%s' "$norm" | sha256sum | cut -c1-16)
        else
          hash=$(printf '%s' "$norm" | shasum -a 256 | cut -c1-16)
        fi
        echo "hash=$hash" >> "$GITHUB_OUTPUT"

    - name: Cache Cargo global bin tools
      if: inputs.tools != ''
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin
        key: cargo-bin-${{ runner.os }}-${{ hashFiles('yog/rust-toolchain.toml') }}-${{ steps.tools_hash.outputs.hash }}-v1
        restore-keys: |
          cargo-bin-${{ runner.os }}-${{ steps.tools_hash.outputs.hash }}-
          cargo-bin-${{ runner.os }}-

    - name: Install/ensure global cargo tools
      if: inputs.tools != ''
      shell: bash
      working-directory: yog
      run: |
        set -euo pipefail
        echo "Requested global tools: ${{ inputs.tools }}"
        for spec in ${{ inputs.tools }}; do
          [[ -z "$spec" ]] && continue
          name=${spec%@*}
          version=${spec#*@}
          if [[ "$name" == "$version" ]]; then
            version=""  # no version pinned
          fi
          if command -v "$name" >/dev/null 2>&1; then
            if [[ -n "$version" ]] && ! "$name" --version 2>/dev/null | grep -q "$version"; then
              echo "[tools] Re-installing $name@$version (version drift)"
              cargo install "$name" --force --version "$version" --locked
            else
              echo "[tools] Found $name ($( "$name" --version 2>/dev/null || echo '?' ))"
            fi
            continue
          fi
            if [[ -n "$version" ]]; then
              echo "[tools] Installing $name@$version"
              cargo install "$name" --version "$version" --locked
            else
              echo "[tools] Installing $name (latest)"
              cargo install "$name" --locked
            fi
        done
